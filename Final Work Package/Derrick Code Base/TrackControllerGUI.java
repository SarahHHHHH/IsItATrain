package TrainSimulator;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.*;

/**
 * This class will implement the GUI form of the Track Controller 
 * 
 * @author Derrick Ward
 */
public class TrackControllerGUI extends javax.swing.JFrame {
    PhantomCTCGUI ctc;
    boolean trackSelected = false;
    boolean blockSelected = false;
    TrackModel redLine, greenLine;
    
    /**
     * This Constructor creates a new TrackController GUI
     * 
     * @param ctc The CTC controlling the system
     * @param redLine The Red Track Line
     * @param greenLine The Green Track Line
     */
    public TrackControllerGUI(PhantomCTCGUI ctc, TrackModel redLine, TrackModel greenLine) {
        /*Set the CTC*/
        this.ctc = ctc;
        this.redLine = redLine;
        this.greenLine = greenLine;
        
        initComponents();
        populateData();
        runInterfaceDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        switchStateGroup = new javax.swing.ButtonGroup();
        railwayStateGroup = new javax.swing.ButtonGroup();
        trackCircuitGroup = new javax.swing.ButtonGroup();
        railGroup = new javax.swing.ButtonGroup();
        blockControlPanel = new javax.swing.JPanel();
        speedButt = new javax.swing.JButton();
        dropRailRadio = new javax.swing.JRadioButton();
        raiseRailRadio = new javax.swing.JRadioButton();
        controlRailwayLabel = new javax.swing.JLabel();
        openSRadio = new javax.swing.JRadioButton();
        authorityField = new javax.swing.JTextField();
        speedField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        closeSRadio = new javax.swing.JRadioButton();
        authorityButt = new javax.swing.JButton();
        controlSwitchLabel = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        badCircuitRadio = new javax.swing.JRadioButton();
        goodCircuitRadio = new javax.swing.JRadioButton();
        breakRailRadio = new javax.swing.JRadioButton();
        goodRailRadio = new javax.swing.JRadioButton();
        blockInfoPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        startConnectVal = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        endConnectVal = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        wcMonitorVal = new javax.swing.JLabel();
        trackVal = new javax.swing.JLabel();
        blockVal = new javax.swing.JLabel();
        stationVal = new javax.swing.JLabel();
        switchOnMeVal = new javax.swing.JLabel();
        switchStateVal = new javax.swing.JLabel();
        railStateVal = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        trainOnMeVal = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        authorityVal = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        speedVal = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        crossingColor = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        stationName = new javax.swing.JLabel();
        railOnMeVal = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        tsVal = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        trackCircuitVal = new javax.swing.JLabel();
        trackRailVal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        trackComboSel = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        blockComboSel = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        blockControlPanel.setBackground(new java.awt.Color(153, 204, 255));
        blockControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Controlling Block Information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 15))); // NOI18N
        blockControlPanel.setToolTipText("");

        speedButt.setText("Push Speed to Block");
        speedButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedButtActionPerformed(evt);
            }
        });

        railwayStateGroup.add(dropRailRadio);
        dropRailRadio.setLabel("Drop Crossbar");
        dropRailRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRailRadioActionPerformed(evt);
            }
        });

        railwayStateGroup.add(raiseRailRadio);
        raiseRailRadio.setLabel("Raise Crossbar");
        raiseRailRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiseRailRadioActionPerformed(evt);
            }
        });

        controlRailwayLabel.setText("Control Railway Crossing");

        switchStateGroup.add(openSRadio);
        openSRadio.setText("Open Switch");
        openSRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSRadioActionPerformed(evt);
            }
        });

        jLabel3.setText("Authority");

        jLabel4.setText("Speed");

        switchStateGroup.add(closeSRadio);
        closeSRadio.setText("Close Switch");
        closeSRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSRadioActionPerformed(evt);
            }
        });

        authorityButt.setText("Push Authority to Block");
        authorityButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorityButtActionPerformed(evt);
            }
        });

        controlSwitchLabel.setText("Control Switch State");

        jLabel26.setText("Control Track Circuit");

        jLabel27.setText("Control Rail");

        trackCircuitGroup.add(badCircuitRadio);
        badCircuitRadio.setText("Bad Circuit");
        badCircuitRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                badCircuitRadioActionPerformed(evt);
            }
        });

        trackCircuitGroup.add(goodCircuitRadio);
        goodCircuitRadio.setText("Good Circuit");
        goodCircuitRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodCircuitRadioActionPerformed(evt);
            }
        });

        railGroup.add(breakRailRadio);
        breakRailRadio.setText("Broken Rail");
        breakRailRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakRailRadioActionPerformed(evt);
            }
        });

        railGroup.add(goodRailRadio);
        goodRailRadio.setText("Good Rail");
        goodRailRadio.setToolTipText("");
        goodRailRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodRailRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout blockControlPanelLayout = new javax.swing.GroupLayout(blockControlPanel);
        blockControlPanel.setLayout(blockControlPanelLayout);
        blockControlPanelLayout.setHorizontalGroup(
            blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockControlPanelLayout.createSequentialGroup()
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blockControlPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(blockControlPanelLayout.createSequentialGroup()
                                .addComponent(speedField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(speedButt))
                            .addGroup(blockControlPanelLayout.createSequentialGroup()
                                .addComponent(authorityField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(authorityButt))
                            .addGroup(blockControlPanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel3))
                            .addGroup(blockControlPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel4))))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(blockControlPanelLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel26))
                            .addGroup(blockControlPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, blockControlPanelLayout.createSequentialGroup()
                                        .addComponent(badCircuitRadio)
                                        .addGap(41, 41, 41)
                                        .addComponent(goodCircuitRadio))
                                    .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(blockControlPanelLayout.createSequentialGroup()
                                            .addComponent(dropRailRadio)
                                            .addGap(18, 18, 18)
                                            .addComponent(raiseRailRadio))
                                        .addGroup(blockControlPanelLayout.createSequentialGroup()
                                            .addGap(58, 58, 58)
                                            .addComponent(controlRailwayLabel))
                                        .addGroup(blockControlPanelLayout.createSequentialGroup()
                                            .addComponent(openSRadio)
                                            .addGap(31, 31, 31)
                                            .addComponent(closeSRadio))
                                        .addGroup(blockControlPanelLayout.createSequentialGroup()
                                            .addGap(67, 67, 67)
                                            .addComponent(controlSwitchLabel)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, blockControlPanelLayout.createSequentialGroup()
                                        .addComponent(breakRailRadio)
                                        .addGap(39, 39, 39)
                                        .addComponent(goodRailRadio))))
                            .addGroup(blockControlPanelLayout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(jLabel27)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        blockControlPanelLayout.setVerticalGroup(
            blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blockControlPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorityButt))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedButt))
                .addGap(18, 18, 18)
                .addComponent(controlSwitchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openSRadio)
                    .addComponent(closeSRadio))
                .addGap(18, 18, 18)
                .addComponent(controlRailwayLabel)
                .addGap(8, 8, 8)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(raiseRailRadio)
                    .addComponent(dropRailRadio))
                .addGap(30, 30, 30)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(badCircuitRadio)
                    .addComponent(goodCircuitRadio))
                .addGap(18, 18, 18)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breakRailRadio)
                    .addComponent(goodRailRadio))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        blockInfoPanel.setBackground(new java.awt.Color(204, 255, 204));
        blockInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Displaying Information About Block", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 15))); // NOI18N

        jLabel8.setText("Monitoring Wayside Controller: ");

        jLabel9.setText("Track I am On: ");

        jLabel10.setText("My Block Number: ");

        jLabel11.setText("Train Station: ");

        jLabel12.setText("Switch on Me: ");

        jLabel13.setText("Railway Crossing on Me: ");

        jLabel14.setText("Switch Connection:");

        startConnectVal.setText("start");

        jLabel16.setText("Switch State: ");

        endConnectVal.setText("end");

        jLabel18.setText("-------");

        jLabel19.setText("Railway Crossing State: ");

        wcMonitorVal.setText("val");

        trackVal.setText("val");

        blockVal.setText("val");

        stationVal.setText("val");

        switchOnMeVal.setText("val");

        switchStateVal.setText("val");

        railStateVal.setText("val");

        jLabel15.setText("Train is on Me: ");

        trainOnMeVal.setText("val");

        jLabel5.setText("Authority:");

        authorityVal.setText("val");

        jLabel6.setText("Speed:");

        speedVal.setText("val");

        jLabel17.setText("Crossing Light: ");

        crossingColor.setText("Color");

        jLabel20.setText("Train Station Name:");

        railOnMeVal.setText("val");

        jLabel22.setText("----------------------------------------------");

        jLabel23.setText("----------------------------------------------");

        jLabel24.setText("----------------------------------------------");

        jLabel25.setText("----------------------------------------------");

        tsVal.setText("val");

        jLabel28.setText("Track Circuit is: ");

        jLabel29.setText("Track Rail is: ");

        trackCircuitVal.setText("val");

        trackRailVal.setText("val");

        javax.swing.GroupLayout blockInfoPanelLayout = new javax.swing.GroupLayout(blockInfoPanel);
        blockInfoPanel.setLayout(blockInfoPanelLayout);
        blockInfoPanelLayout.setHorizontalGroup(
            blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stationVal)
                                .addGap(51, 51, 51)
                                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(stationName)))
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(speedVal))
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(authorityVal))
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(trainOnMeVal))
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(railOnMeVal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(railStateVal))
                                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addGap(18, 18, 18)
                                        .addComponent(crossingColor))
                                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(switchOnMeVal))
                                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(switchStateVal))
                                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addComponent(startConnectVal)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(endConnectVal)))
                                .addGap(10, 10, 10)
                                .addComponent(jLabel21)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(blockVal))
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(trackVal))
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 47, Short.MAX_VALUE))))
            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(tsVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trackCircuitVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trackRailVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wcMonitorVal)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        blockInfoPanelLayout.setVerticalGroup(
            blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(wcMonitorVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(authorityVal))
                .addGap(18, 18, 18)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(speedVal))
                .addGap(18, 18, 18)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(trainOnMeVal))
                .addGap(18, 18, 18)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(trackVal))
                .addGap(18, 18, 18)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(blockVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(11, 11, 11)
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(stationVal)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stationName))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(tsVal)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addGap(20, 20, 20)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(switchOnMeVal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(switchStateVal))
                        .addGap(28, 28, 28))
                    .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(startConnectVal)
                        .addComponent(jLabel18)
                        .addComponent(endConnectVal)))
                .addGap(13, 13, 13)
                .addComponent(jLabel24)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel21))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(railOnMeVal))
                        .addGap(18, 18, 18)
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(crossingColor))
                        .addGap(18, 18, 18)
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(railStateVal))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25)
                .addGap(28, 28, 28)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(trackCircuitVal))
                .addGap(26, 26, 26)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(trackRailVal))
                .addGap(78, 78, 78))
        );

        jPanel2.setBackground(new java.awt.Color(255, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Block to Control and Inspect", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 15))); // NOI18N

        trackComboSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        trackComboSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackComboSelActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Track");

        blockComboSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        blockComboSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockComboSelActionPerformed(evt);
            }
        });

        jLabel7.setText("Select Block");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(blockComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(trackComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel7)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 48)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Wayside Controller");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blockControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(blockInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** 
    * This changes a switch position to Open, as long as the system verifies it 
    * can. 
    */    
    private void openSRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSRadioActionPerformed
        /* Perform the switch change to open if possible */
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), this.blockComboSel.getSelectedIndex());
        
        //Find out if the Switch Change was able to be done
        boolean actionDone = temp.trackChange(theLine,(this.blockComboSel.getSelectedIndex()-1), 1);
        
        //System.out.println("Did action Happen: "+actionDone);
        
        //Update GUI
        if (actionDone){
            this.openSRadio.setSelected(true);
            //System.out.println("open");
        }
        else{
            this.closeSRadio.setSelected(true);
            //System.out.println("close");
        }
        
        //System.out.println("refresh");
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_openSRadioActionPerformed

    /** 
    * This method pushes an authority to a block.
    */       
    private void authorityButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorityButtActionPerformed
        // Push the Authority stored in the GUI to the block
        int authority;
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the Authority from the GUI
        try{
            authority = Integer.parseInt(this.authorityField.getText());
        }
        catch(Exception e){
            e.printStackTrace();
            authority = 0;
        }
        
        //Set the authority in the block selected
        theLine.blocks.get((this.blockComboSel.getSelectedIndex()-1)).authority = authority;
       
        //Update GUI
        this.authorityField.setText("");
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_authorityButtActionPerformed

    /** 
    * This method pushes a speed to a block.
    */       
    private void speedButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedButtActionPerformed
        // Push the Speed stored in the GUI to the block
        double speed;
        int blockItem = (this.blockComboSel.getSelectedIndex()-1);
        
        //Which Line are we paying attention to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Which Wayside Controller is watching this block?
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), blockItem);
        
        //Get the Speed from the GUI
        try{
            speed = Double.parseDouble(this.speedField.getText());
            speed = (temp._SafetyTrackSpeed.checkSpeed(speed, blockItem)) ? speed : temp._SafetyTrackSpeed.getSafeSpeed(blockItem);
        }
        catch(Exception e){
            e.printStackTrace();
            speed = 0;
        }
        
        //Set the Speed in the block selected
        theLine.blocks.get(blockItem).speed = speed;
       
        //Update GUI
        this.speedField.setText("");
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_speedButtActionPerformed

    /** 
    * This method changes a switch position to close, as long as the system verifies
    * that it can.
    */       
    private void closeSRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSRadioActionPerformed
        /* Perform the switch change to open if possible */
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the Track Controller monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), (this.blockComboSel.getSelectedIndex()-1));
        
        //Find out if the Switch Change was able to be done
        boolean actionDone = temp.trackChange(theLine,(this.blockComboSel.getSelectedIndex()-1), 0);
        
        //Update GUI
        if (actionDone){
            this.closeSRadio.setSelected(true);
        }
        else{
            this.openSRadio.setSelected(true);
        }
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_closeSRadioActionPerformed

    
    /** 
    * This method drops the railway crossing, as long as the system verifies that
    * this is the right time to do that. 
    */       
    private void dropRailRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRailRadioActionPerformed
        /* Drop the Railway Crossing if possible */
        
        System.out.println("Rail Dropped Clicked");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), (this.blockComboSel.getSelectedIndex()-1));
        
        //Find out if the Railway Crossing Change was able to be done
        boolean actionDone = temp.dropCrossBar((this.blockComboSel.getSelectedIndex()-1), theLine);
        
        //Update GUI
        if (actionDone){
            this.dropRailRadio.setSelected(true);
        }
        else{
            this.raiseRailRadio.setSelected(true);
        }
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_dropRailRadioActionPerformed

  
    /** 
    * This method raises the railway crossing, as long as the system verifies that
    * this is the right time to do that. 
    */  
    private void raiseRailRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiseRailRadioActionPerformed
        /* Raise the Railway Crossing if possible */
        
        System.out.println("Rail Raised Clicked");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), (this.blockComboSel.getSelectedIndex()-1));
        
        //Find out if the Railway Crossing Change was able to be done
        boolean actionDone = temp.raiseCrossBar((this.blockComboSel.getSelectedIndex()-1), theLine);
        
        //Update GUI
        if (actionDone){
            this.raiseRailRadio.setSelected(true);
        }
        else{
            this.dropRailRadio.setSelected(true);
        }
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_raiseRailRadioActionPerformed

    
    /** 
    * This method decides whether it is time to display the block information
    * panel or not.
    */      
    private void trackComboSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackComboSelActionPerformed
        //Get the Item Selected
        int item = this.trackComboSel.getSelectedIndex();
        DefaultComboBoxModel blockStrings = new DefaultComboBoxModel();
        
        //Figure out which Blocks to display in the Block Combo Box
        switch (item){
            //Red Line
            case 1:
                /*Populate the Box Select JComboBox for RedLine*/
                blockStrings.addElement("None");
                System.out.println(this.ctc.getRedLineNumOfBlocks());
                for (int index = 0; index < this.ctc.getRedLineNumOfBlocks(); index++)
                    blockStrings.addElement("Block "+index);
                this.blockComboSel.setModel(blockStrings);
                this.blockComboSel.setSelectedIndex(0);
                break;
            //Green Line
            case 2:
                /*Populate the Box Select JComboBox for GreenLine*/
                blockStrings.addElement("None");
                System.out.println(this.ctc.getGreenLineNumOfBlocks());
                for (int index = 0; index < this.ctc.getGreenLineNumOfBlocks(); index++)
                    blockStrings.addElement("Block "+index);
                this.blockComboSel.setModel(blockStrings);
                this.blockComboSel.setSelectedIndex(0);
                break;
        }
        
        switch (item){
            case 0:
                this.trackSelected = false;
                this.hideBlockControl();
                this.hideBlockInfo();
                break;
            default:
                this.trackSelected = true;
                if (this.trackSelected && this.blockSelected){
                    this.showBlockControl();
                    this.showBlockInfo();
                    
                    //Refresh Block Information
                    this.refreshBlockInfoDisplay();
                }
                else{
                   this.hideBlockControl();
                   this.hideBlockInfo(); 
                }
        }
        
        System.out.println("track select changed");
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_trackComboSelActionPerformed

    /** 
    * This method decides whether it is time to display the block information
    * panel or not.
    */ 
    private void blockComboSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockComboSelActionPerformed
        //Get the Item Selected
        int item = this.blockComboSel.getSelectedIndex();
        
        switch (item){
            case 0:
                this.blockSelected = false;
                this.hideBlockControl();
                this.hideBlockInfo();
                break;
            default:
                this.blockSelected = true;
                if (this.trackSelected && this.blockSelected){
                    this.showBlockControl();
                    this.showBlockInfo();
                    
                    //Refresh Block Information
                    this.refreshBlockInfoDisplay();
                    
                }
                else{
                   this.hideBlockControl();
                   this.hideBlockInfo(); 
                }
        }
        System.out.println("block select changed");
    }//GEN-LAST:event_blockComboSelActionPerformed

    
    /**
     * This method sets the Track Circuit status at the selected block to Fine
     */
    private void goodCircuitRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodCircuitRadioActionPerformed
        /* Set this Track Circuit as Good and Functional */
        
        //Get the Item Selected
        int item = (this.blockComboSel.getSelectedIndex()-1);
        
        System.out.println("Set Track Circuit as Good");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), item);

        //Tell Track Controller this Track Circuit was fixed
        temp.getTrackStatus().fixedBadTrackCircuitHere(item);
        
        //Set track circuit failure to false
        theLine.blocks.get(item).trackCircuitFailure = false;
        
        //Refresh GUI
        this.refreshBlockInfoDisplay();
        
    }//GEN-LAST:event_goodCircuitRadioActionPerformed

    
    /**
     * This method sets the Track Circuit status at the selected block to Bad
     */
    private void badCircuitRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_badCircuitRadioActionPerformed
        /* Set this Track Circuit as Bad and Non-Functional */
        
        //Get the Item Selected
        int item = (this.blockComboSel.getSelectedIndex()-1);
        
        System.out.println("Set Track Circuit as Bad");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), item);

        //Tell Track Controller this Track Circuit was fixed
        temp.getTrackStatus().badTrackCircuitDetected(item);
        
        //Set track circuit failure to false
        theLine.blocks.get(item).trackCircuitFailure = true;
        
        //Refresh GUI
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_badCircuitRadioActionPerformed

    
    /**
     * This method sets the Rail status at the selected block to Fine
     */
    private void goodRailRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodRailRadioActionPerformed
        /* Set the Rail Status as Fine */
        
        //Get the Item Selected
        int item = (this.blockComboSel.getSelectedIndex()-1);
        
        System.out.println("Set Rail Status as Fine");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), item);

        //Tell Track Controller this Track Circuit was fixed
        temp.getTrackStatus().fixedBrokenRailHere(item);
        
        //Set track circuit failure to false
        theLine.blocks.get(item).brokenRailDetection = false;
        
        //Refresh GUI
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_goodRailRadioActionPerformed
    
    
    /**
     * This method sets the Rail status at the selected block to Broken
     */
    private void breakRailRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakRailRadioActionPerformed
        /* Set the Rail Status as Broken */
        
        //Get the Item Selected
        int item = (this.blockComboSel.getSelectedIndex()-1);
        
        System.out.println("Set Rail Status as Broken");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), item);

        //Tell Track Controller this Track Circuit was fixed
        temp.getTrackStatus().brokenRailsDetected(item);
        
        //Set track circuit failure to false
        theLine.blocks.get(item).brokenRailDetection = true;
        
        //Refresh GUI
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_breakRailRadioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton authorityButt;
    private javax.swing.JTextField authorityField;
    private javax.swing.JLabel authorityVal;
    private javax.swing.JRadioButton badCircuitRadio;
    private javax.swing.JComboBox blockComboSel;
    private javax.swing.JPanel blockControlPanel;
    private javax.swing.JPanel blockInfoPanel;
    private javax.swing.JLabel blockVal;
    private javax.swing.JRadioButton breakRailRadio;
    private javax.swing.JRadioButton closeSRadio;
    private javax.swing.JLabel controlRailwayLabel;
    private javax.swing.JLabel controlSwitchLabel;
    private javax.swing.JLabel crossingColor;
    private javax.swing.JRadioButton dropRailRadio;
    private javax.swing.JLabel endConnectVal;
    private javax.swing.JRadioButton goodCircuitRadio;
    private javax.swing.JRadioButton goodRailRadio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton openSRadio;
    private javax.swing.ButtonGroup railGroup;
    private javax.swing.JLabel railOnMeVal;
    private javax.swing.JLabel railStateVal;
    private javax.swing.ButtonGroup railwayStateGroup;
    private javax.swing.JRadioButton raiseRailRadio;
    private javax.swing.JButton speedButt;
    private javax.swing.JTextField speedField;
    private javax.swing.JLabel speedVal;
    private javax.swing.JLabel startConnectVal;
    private javax.swing.JLabel stationName;
    private javax.swing.JLabel stationVal;
    private javax.swing.JLabel switchOnMeVal;
    private javax.swing.ButtonGroup switchStateGroup;
    private javax.swing.JLabel switchStateVal;
    private javax.swing.ButtonGroup trackCircuitGroup;
    private javax.swing.JLabel trackCircuitVal;
    private javax.swing.JComboBox trackComboSel;
    private javax.swing.JLabel trackRailVal;
    private javax.swing.JLabel trackVal;
    private javax.swing.JLabel trainOnMeVal;
    private javax.swing.JLabel tsVal;
    private javax.swing.JLabel wcMonitorVal;
    // End of variables declaration//GEN-END:variables

    
    /** 
    * This method hides the block control and block information panels.
    */ 
    public void runInterfaceDefaults() {
        /*Disable the Block Info Panel and the Block Control Panel*/
        this.hideBlockControl();
        this.hideBlockInfo();   
    }
  

    /** 
    * This method hides the block control panel.
    */     
    private void hideBlockControl(){
        this.blockControlPanel.setVisible(false);
    }
    
    
    /** 
    * This method hides the block information panel.
    */     
    private void hideBlockInfo(){
        this.blockInfoPanel.setVisible(false);
    }
    
    
    /** 
    * This method shows the block control panel.
    */    
    private void showBlockControl(){
        this.blockControlPanel.setVisible(true);
    }
    
    /** 
    * This method shows the block information panel.
    */    
    private void showBlockInfo(){
        this.blockInfoPanel.setVisible(true);
    }
  
    
    /** 
    * This method hides the switch state controls.
    */     
    private void hideControlSwitchState(){
        this.controlSwitchLabel.setVisible(false);
        this.openSRadio.setVisible(false);
        this.closeSRadio.setVisible(false);
    }
 
    
    /** 
    * This method shows the switch state controls.
    */     
    private void showControlSwitchState(){
        this.controlSwitchLabel.setVisible(true);
        this.openSRadio.setVisible(true);
        this.closeSRadio.setVisible(true);
    }
 
    
    /** 
    * This method hides the Railway Crossing bar state controls.
    */     
    private void hideControlRailwayState(){
        this.controlRailwayLabel.setVisible(false);
        this.dropRailRadio.setVisible(false);
        this.raiseRailRadio.setVisible(false);
    }

    
    /** 
    * This method shows the Railway Crossing bar state controls.
    */   
    private void showControlRailwayState(){
        this.controlRailwayLabel.setVisible(true);
        this.dropRailRadio.setVisible(true);
        this.raiseRailRadio.setVisible(true);
    }

  
    /** 
    * This method populates the combo boxes for tracks and blocks.
    */   
    private void populateData() {
        
        /*Temporary*/
        DefaultComboBoxModel trackStrings = new DefaultComboBoxModel();
        DefaultComboBoxModel blockStrings = new DefaultComboBoxModel();
        
        /*Populate the Track Select JComboBox */
        trackStrings.addElement("None");
        trackStrings.addElement("RedLine");
        trackStrings.addElement("GreenLine");
        this.trackComboSel.setModel(trackStrings);
        this.trackComboSel.setSelectedIndex(0);
        
        /*Populate the Box Select JComboBox*/
        blockStrings.addElement("None");
        System.out.println(this.ctc.getRedLineNumOfBlocks());
        for (int index = 0; index < this.ctc.getRedLineNumOfBlocks(); index++)
            blockStrings.addElement("Block "+index);
        this.blockComboSel.setModel(blockStrings);
        this.blockComboSel.setSelectedIndex(0);
    }
    
    
    /** 
    * This method gets the track controller that monitors the selected block.
    * 
    * @param listOfControllers The list of track controllers for a given track line
    * @param block_ID The ID of the block
    * @return The Track Controller monitoring the selected block (from GUI)
    */      
    private TrackController getTrackControllerForBlock(ArrayList<TrackController> listOfControllers ,int block_ID){
        TrackController temp = null;
        
        /*Loop through list of Controllers to find the one monitoring this Block*/
        for (int index = 0; index < listOfControllers.size(); index++){
            int block_start, block_end;
            temp = listOfControllers.get(index);
            block_start = temp.getTrackStatus().getBlockStart();
            block_end = temp.getTrackStatus().getBlockEnd();
            if(block_start <= block_ID && block_ID <= block_end){
                //Exit the loop and return this trackcontroller
                break;
            }
            else{
                continue;
            }
        }
        
        return (temp);
    }
    
    
    /** 
    * This method refreshes all components in the Block Control and Information 
    * Panels.
    */       
    public void refreshBlockInfoDisplay(){
        //Get the Item Selected
        int item = (this.blockComboSel.getSelectedIndex()-1);
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        if (this.trackSelected && this.blockSelected){
            this.showBlockControl();
            this.showBlockInfo();

            TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), item);

            /*Display Approriate Control Configuration -> Need to add a 
              decision for which line we are on!*/

            //Is there even a Switch on this block?
            if (theLine.blocks.get(item).switchOnBlock()){
                this.showControlSwitchState();
            }
            else{
                this.hideControlSwitchState();
            }

            //Is there even a Railway Crossing on this block?
            if (theLine.blocks.get(item).crossingOnBlock()){
                this.showControlRailwayState();
            }
            else{
                this.hideControlRailwayState();
            }

            /*Display Block Info*/
            //Set Track Controller Monitoring
            this.wcMonitorVal.setText(""+temp.getTrackControllerIdentifier());
            //Set Track Block is on
            this.trackVal.setText((this.trackComboSel.getSelectedIndex() == 1) ? "Red Line" : "Green Line");
            //Set Block Number
            this.blockVal.setText(""+item);
            //Am I a train station? ->need to implement getting station name
            this.stationVal.setText(theLine.blocks.get(item).stationOnBlock() ? "Yes":"No");
            if (theLine.blocks.get(item).stationOnBlock()){
                this.tsVal.setText(theLine.blocks.get(item).stationName);
            }
            else{
                this.tsVal.setText("N / A");
            }
            
            //Is there a switch on me?
            this.switchOnMeVal.setText(theLine.blocks.get(item).switchOnBlock() ? "Yes":"No");
            //Set what the switch state is
            if(theLine.blocks.get(item).switchOnBlock()){
                int switch_ID = theLine.blocks.get(item).switch_id;
                for(int i = 0; i < theLine.switches.size(); i++)
                {
                    if(theLine.switches.get(i).id == switch_ID)
                    {
                        switch_ID = i;
                        break;
                    }
                }
                this.switchStateVal.setText((theLine.switches.get(switch_ID).next_block == theLine.switches.get(switch_ID).block_id[1]) ? "Closed":"Open");
                //If Switch is Closed
                if (theLine.switches.get(switch_ID).next_block == theLine.switches.get(switch_ID).block_id[1]){
                    this.closeSRadio.setSelected(true);
                }
                //Switch is Opened
                else{
                    this.openSRadio.setSelected(true);
                }
                this.startConnectVal.setText(""+theLine.switches.get(switch_ID).block_id[0]);
                this.endConnectVal.setText(""+theLine.switches.get(switch_ID).next_block);
            }
            else{
                this.switchStateVal.setText("No Switch Present");
                this.startConnectVal.setText("");
                this.endConnectVal.setText("");
                this.switchStateGroup.clearSelection();
            }
            //Is there a Railway Crossing on Me?
            this.railOnMeVal.setText(theLine.blocks.get(item).crossingOnBlock() ? "Yes":"No");
            
            if(theLine.blocks.get(item).crossingOnBlock()){
                this.railStateVal.setText(temp.getRailwayCrossing().crossingDropped ? "Dropped":"Raised");
                if (temp.getRailwayCrossing().crossingDropped){
                    //Set Drop Radio Button Active
                    this.dropRailRadio.setSelected(true);
                    
                    //Setting Railway Crossing Color to Red
                    this.crossingColor.setOpaque(true);
                    this.crossingColor.setBackground(Color.RED);
                    this.crossingColor.setForeground(Color.RED);
                }
                else{
                    //If this block does not contain a crossing
                    if (!theLine.blocks.get(item).crossingOnBlock()){
                        this.crossingColor.setOpaque(false);
                        this.crossingColor.setForeground(Color.black);
                        this.crossingColor.setText("N / A");
                    }
                    //Block does containing a crossing
                    else{
                        //Set Raise Radio Button Active
                        this.raiseRailRadio.setSelected(true);

                        //Setting Railway Crossing Color to Green
                        this.crossingColor.setOpaque(true);
                        this.crossingColor.setBackground(Color.GREEN);
                        this.crossingColor.setForeground(Color.GREEN);
                    }
                }
            }
            else{
                this.railStateVal.setText("No Railway Crossing Present");
                this.railOnMeVal.setText("No");
                this.crossingColor.setOpaque(false);
                this.crossingColor.setForeground(Color.black);
                this.crossingColor.setText("N / A");
                this.railwayStateGroup.clearSelection();
            }
            
            //Set the Block Authority
            this.authorityVal.setText(""+theLine.blocks.get(item).authority);
            
            //Set the Block Speed
            this.speedVal.setText(""+theLine.blocks.get(item).speed);
            
            //Is there a train on me?
            this.trainOnMeVal.setText(theLine.blocks.get(item).trainOnBlock() ? ("Yes, Train ID: "+theLine.getTrainID(item)):"No");
            
            //Is the Track Circuit Located at this Block Good or Bad?
            this.trackCircuitVal.setText(theLine.blocks.get(item).trackCircuitFailure ? "Bad Track Circuit": "Track Circuit is Fine");
            
            //Set the appropriate Track Circuit Radio Button 
            if (theLine.blocks.get(item).trackCircuitFailure){
                this.badCircuitRadio.setSelected(true);
            }
            else{
                this.goodCircuitRadio.setSelected(true);
            }
            
            //Is the Rail on the Block Broken or Fine?
            this.trackRailVal.setText(theLine.blocks.get(item).brokenRailDetection ? "Rail is Broken Here":"Rail is Fine");
            
            //Set te appropriate Rail Radio Button
            if(theLine.blocks.get(item).brokenRailDetection){
                this.breakRailRadio.setSelected(true);
            }
            else{
                this.goodRailRadio.setSelected(true);
            }
        }
    }
}
