package TrainSimulator;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dward330
 */
public class TrackControllerGUI extends javax.swing.JFrame {
    PhantomCTCGUI ctc;
    boolean trackSelected = false;
    boolean blockSelected = false;
    TrackModel redLine, greenLine;
    
    /**
     * Creates new form TrackControllerForm
     */
    public TrackControllerGUI(PhantomCTCGUI ctc, TrackModel redLine, TrackModel greenLine) {
        /*Set the CTC*/
        this.ctc = ctc;
        this.redLine = redLine;
        this.greenLine = greenLine;
        
        initComponents();
        populateData();
        runInterfaceDefaults();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        switchStateGroup = new javax.swing.ButtonGroup();
        railwayStateGroup = new javax.swing.ButtonGroup();
        blockControlPanel = new javax.swing.JPanel();
        speedButt = new javax.swing.JButton();
        dropRailRadio = new javax.swing.JRadioButton();
        raiseRailRadio = new javax.swing.JRadioButton();
        controlRailwayLabel = new javax.swing.JLabel();
        openSRadio = new javax.swing.JRadioButton();
        authorityField = new javax.swing.JTextField();
        speedField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        closeSRadio = new javax.swing.JRadioButton();
        authorityButt = new javax.swing.JButton();
        controlSwitchLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        blockInfoPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        startConnectVal = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        endConnectVal = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        wcMonitorVal = new javax.swing.JLabel();
        trackVal = new javax.swing.JLabel();
        blockVal = new javax.swing.JLabel();
        stationVal = new javax.swing.JLabel();
        switchOnMeVal = new javax.swing.JLabel();
        switchStateVal = new javax.swing.JLabel();
        railOnMeVal = new javax.swing.JLabel();
        railStateVal = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        trainOnMeVal = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        authorityVal = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        speedVal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        trackComboSel = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        blockComboSel = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        blockControlPanel.setBackground(new java.awt.Color(153, 204, 255));
        blockControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Controlling Block Information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 15))); // NOI18N
        blockControlPanel.setToolTipText("");

        speedButt.setText("Push Speed to Block");
        speedButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedButtActionPerformed(evt);
            }
        });

        railwayStateGroup.add(dropRailRadio);
        dropRailRadio.setLabel("Drop Crossbar");
        dropRailRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRailRadioActionPerformed(evt);
            }
        });

        railwayStateGroup.add(raiseRailRadio);
        raiseRailRadio.setLabel("Raise Crossbar");
        raiseRailRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiseRailRadioActionPerformed(evt);
            }
        });

        controlRailwayLabel.setText("Control Railway Crossing");

        switchStateGroup.add(openSRadio);
        openSRadio.setText("Open Switch");
        openSRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSRadioActionPerformed(evt);
            }
        });

        jLabel3.setText("Authority");

        jLabel4.setText("Speed");

        switchStateGroup.add(closeSRadio);
        closeSRadio.setText("Close Switch");
        closeSRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSRadioActionPerformed(evt);
            }
        });

        authorityButt.setText("Push Authority to Block");
        authorityButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorityButtActionPerformed(evt);
            }
        });

        controlSwitchLabel.setText("Control Switch State");

        javax.swing.GroupLayout blockControlPanelLayout = new javax.swing.GroupLayout(blockControlPanel);
        blockControlPanel.setLayout(blockControlPanelLayout);
        blockControlPanelLayout.setHorizontalGroup(
            blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addComponent(dropRailRadio)
                        .addGap(18, 18, 18)
                        .addComponent(raiseRailRadio))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(controlRailwayLabel))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addComponent(openSRadio)
                        .addGap(31, 31, 31)
                        .addComponent(closeSRadio))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(controlSwitchLabel))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addComponent(speedField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedButt))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addComponent(authorityField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorityButt))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel3))
                    .addGroup(blockControlPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        blockControlPanelLayout.setVerticalGroup(
            blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blockControlPanelLayout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorityButt))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedButt))
                .addGap(36, 36, 36)
                .addComponent(controlSwitchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openSRadio)
                    .addComponent(closeSRadio))
                .addGap(26, 26, 26)
                .addComponent(controlRailwayLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dropRailRadio)
                    .addComponent(raiseRailRadio))
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel2.setText("Wayside Controller");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        blockInfoPanel.setBackground(new java.awt.Color(204, 255, 204));
        blockInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Displaying Block Information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 15))); // NOI18N

        jLabel8.setText("Wayside Controller Monitoring: ");

        jLabel9.setText("Track I am On: ");

        jLabel10.setText("My Block Number: ");

        jLabel11.setText("Train Station: ");

        jLabel12.setText("Switch on Me: ");

        jLabel13.setText("Railway Crossing on Me: ");

        jLabel14.setText("Switch Connection:");

        startConnectVal.setText("start");

        jLabel16.setText("Switch State: ");

        endConnectVal.setText("end");

        jLabel18.setText("-------");

        jLabel19.setText("Railway Crossing State: ");

        wcMonitorVal.setText("val");

        trackVal.setText("val");

        blockVal.setText("val");

        stationVal.setText("val");

        switchOnMeVal.setText("val");

        switchStateVal.setText("val");

        railOnMeVal.setText("val");

        railStateVal.setText("val");

        jLabel15.setText("Train is on Me: ");

        trainOnMeVal.setText("val");

        jLabel5.setText("Authority:");

        authorityVal.setText("val");

        jLabel6.setText("Speed:");

        speedVal.setText("val");

        javax.swing.GroupLayout blockInfoPanelLayout = new javax.swing.GroupLayout(blockInfoPanel);
        blockInfoPanel.setLayout(blockInfoPanelLayout);
        blockInfoPanelLayout.setHorizontalGroup(
            blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(authorityVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(railStateVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trainOnMeVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(switchOnMeVal)
                                    .addComponent(switchStateVal))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                                .addComponent(startConnectVal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endConnectVal))
                            .addComponent(railOnMeVal)
                            .addComponent(jLabel14)))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stationVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trackVal))
                    .addGroup(blockInfoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wcMonitorVal)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        blockInfoPanelLayout.setVerticalGroup(
            blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockInfoPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(wcMonitorVal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(trackVal))
                .addGap(31, 31, 31)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(blockVal))
                .addGap(28, 28, 28)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(stationVal))
                .addGap(40, 40, 40)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(switchOnMeVal)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(switchStateVal)
                    .addComponent(startConnectVal)
                    .addComponent(jLabel18)
                    .addComponent(endConnectVal))
                .addGap(28, 28, 28)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(railOnMeVal))
                .addGap(18, 18, 18)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(railStateVal))
                .addGap(31, 31, 31)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(authorityVal))
                .addGap(26, 26, 26)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(speedVal))
                .addGap(17, 17, 17)
                .addGroup(blockInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(trainOnMeVal))
                .addGap(59, 59, 59))
        );

        jPanel2.setBackground(new java.awt.Color(255, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Block to Control and Inspect", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 15))); // NOI18N

        trackComboSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        trackComboSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackComboSelActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Track");

        blockComboSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        blockComboSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockComboSelActionPerformed(evt);
            }
        });

        jLabel7.setText("Select Block");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(blockComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(trackComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel7)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockComboSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(182, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blockControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(blockInfoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void openSRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSRadioActionPerformed
        /* Perform the switch change to open if possible */
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), this.blockComboSel.getSelectedIndex());
        
        //Find out if the Switch Change was able to be done
        boolean actionDone = temp.trackChange(theLine,(this.blockComboSel.getSelectedIndex()-1), 1);
        
        //Update GUI
        if (actionDone){
            this.openSRadio.setSelected(true);
        }
        else{
            this.closeSRadio.setSelected(true);
        }
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_openSRadioActionPerformed

    private void authorityButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorityButtActionPerformed
        // Push the Authority stored in the GUI to the block
        int authority;
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the Authority from the GUI
        try{
            authority = Integer.parseInt(this.authorityField.getText());
        }
        catch(Exception e){
            e.printStackTrace();
            authority = 0;
        }
        
        //Set the authority in the block selected
        theLine.blocks.get((this.blockComboSel.getSelectedIndex()-1)).authority = authority;
       
        //Update GUI
        this.authorityField.setText("");
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_authorityButtActionPerformed

    private void speedButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedButtActionPerformed
        // Push the Speed stored in the GUI to the block
        double speed;
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the Speed from the GUI
        try{
            speed = Double.parseDouble(this.speedField.getText());
        }
        catch(Exception e){
            e.printStackTrace();
            speed = 0;
        }
        
        //Set the Speed in the block selected
        theLine.blocks.get((this.blockComboSel.getSelectedIndex()-1)).speed = speed;
       
        //Update GUI
        this.speedField.setText("");
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_speedButtActionPerformed

    private void closeSRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSRadioActionPerformed
        /* Perform the switch change to open if possible */
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the Track Controller monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), (this.blockComboSel.getSelectedIndex()-1));
        
        //Find out if the Switch Change was able to be done
        boolean actionDone = temp.trackChange(theLine,(this.blockComboSel.getSelectedIndex()-1), 0);
        
        //Update GUI
        if (actionDone){
            this.closeSRadio.setSelected(true);
        }
        else{
            this.openSRadio.setSelected(true);
        }
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_closeSRadioActionPerformed

    private void dropRailRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRailRadioActionPerformed
        /* Drop the Railway Crossing if possible */
        
        System.out.println("Rail Dropped Clicked");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), (this.blockComboSel.getSelectedIndex()-1));
        
        //Find out if the Railway Crossing Change was able to be done
        boolean actionDone = temp.dropCrossBar((this.blockComboSel.getSelectedIndex()-1), theLine);
        
        //Update GUI
        if (actionDone){
            this.dropRailRadio.setSelected(true);
        }
        else{
            this.raiseRailRadio.setSelected(true);
        }
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_dropRailRadioActionPerformed

    private void raiseRailRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiseRailRadioActionPerformed
        /* Raise the Railway Crossing if possible */
        
        System.out.println("Rail Raised Clicked");
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        //Get the TrackController monitoring this block
        TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), (this.blockComboSel.getSelectedIndex()-1));
        
        //Find out if the Railway Crossing Change was able to be done
        boolean actionDone = temp.raiseCrossBar((this.blockComboSel.getSelectedIndex()-1), theLine);
        
        //Update GUI
        if (actionDone){
            this.raiseRailRadio.setSelected(true);
        }
        else{
            this.dropRailRadio.setSelected(true);
        }
        
        this.refreshBlockInfoDisplay();
    }//GEN-LAST:event_raiseRailRadioActionPerformed

    private void trackComboSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackComboSelActionPerformed
        //Get the Item Selected
        int item = this.trackComboSel.getSelectedIndex();
        
        switch (item){
            case 0:
                this.trackSelected = false;
                this.hideBlockControl();
                this.hideBlockInfo();
                break;
            default:
                this.trackSelected = true;
                if (this.trackSelected && this.blockSelected){
                    this.showBlockControl();
                    this.showBlockInfo();
                    
                    //Refresh Block Information
                    this.refreshBlockInfoDisplay();
                }
                else{
                   this.hideBlockControl();
                   this.hideBlockInfo(); 
                }
        }
        System.out.println("track select changed");
    }//GEN-LAST:event_trackComboSelActionPerformed

    private void blockComboSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockComboSelActionPerformed
        //Get the Item Selected
        int item = this.blockComboSel.getSelectedIndex();
        
        switch (item){
            case 0:
                this.blockSelected = false;
                this.hideBlockControl();
                this.hideBlockInfo();
                break;
            default:
                this.blockSelected = true;
                if (this.trackSelected && this.blockSelected){
                    this.showBlockControl();
                    this.showBlockInfo();
                    
                    //Refresh Block Information
                    this.refreshBlockInfoDisplay();
                    
                }
                else{
                   this.hideBlockControl();
                   this.hideBlockInfo(); 
                }
        }
        System.out.println("block select changed");
    }//GEN-LAST:event_blockComboSelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton authorityButt;
    private javax.swing.JTextField authorityField;
    private javax.swing.JLabel authorityVal;
    private javax.swing.JComboBox blockComboSel;
    private javax.swing.JPanel blockControlPanel;
    private javax.swing.JPanel blockInfoPanel;
    private javax.swing.JLabel blockVal;
    private javax.swing.JRadioButton closeSRadio;
    private javax.swing.JLabel controlRailwayLabel;
    private javax.swing.JLabel controlSwitchLabel;
    private javax.swing.JRadioButton dropRailRadio;
    private javax.swing.JLabel endConnectVal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton openSRadio;
    private javax.swing.JLabel railOnMeVal;
    private javax.swing.JLabel railStateVal;
    private javax.swing.ButtonGroup railwayStateGroup;
    private javax.swing.JRadioButton raiseRailRadio;
    private javax.swing.JButton speedButt;
    private javax.swing.JTextField speedField;
    private javax.swing.JLabel speedVal;
    private javax.swing.JLabel startConnectVal;
    private javax.swing.JLabel stationVal;
    private javax.swing.JLabel switchOnMeVal;
    private javax.swing.ButtonGroup switchStateGroup;
    private javax.swing.JLabel switchStateVal;
    private javax.swing.JComboBox trackComboSel;
    private javax.swing.JLabel trackVal;
    private javax.swing.JLabel trainOnMeVal;
    private javax.swing.JLabel wcMonitorVal;
    // End of variables declaration//GEN-END:variables

    public void runInterfaceDefaults() {
        /*Disable the Block Info Panel and the Block Control Panel*/
        this.hideBlockControl();
        this.hideBlockInfo();   
    }
    
    private void hideBlockControl(){
        this.blockControlPanel.setVisible(false);
    }
    
    private void hideBlockInfo(){
        this.blockInfoPanel.setVisible(false);
    }
    
    private void showBlockControl(){
        this.blockControlPanel.setVisible(true);
    }
    
    private void showBlockInfo(){
        this.blockInfoPanel.setVisible(true);
    }
    
    private void hideControlSwitchState(){
        this.controlSwitchLabel.setVisible(false);
        this.openSRadio.setVisible(false);
        this.closeSRadio.setVisible(false);
    }
    
    private void showControlSwitchState(){
        this.controlSwitchLabel.setVisible(true);
        this.openSRadio.setVisible(true);
        this.closeSRadio.setVisible(true);
    }
    
    private void hideControlRailwayState(){
        this.controlRailwayLabel.setVisible(false);
        this.dropRailRadio.setVisible(false);
        this.raiseRailRadio.setVisible(false);
    }
    
    private void showControlRailwayState(){
        this.controlRailwayLabel.setVisible(true);
        this.dropRailRadio.setVisible(true);
        this.raiseRailRadio.setVisible(true);
    }

    private void populateData() {
        
        /*Temporary*/
        DefaultComboBoxModel trackStrings = new DefaultComboBoxModel();
        DefaultComboBoxModel blockStrings = new DefaultComboBoxModel();
        
        /*Populate the Track Select JComboBox */
        trackStrings.addElement("None");
        trackStrings.addElement("RedLine");
        trackStrings.addElement("GreenLine");
        this.trackComboSel.setModel(trackStrings);
        this.trackComboSel.setSelectedIndex(0);
        
        /*Populate the Box Select JComboBox*/
        blockStrings.addElement("None");
        System.out.println(this.ctc.getNumOfBlocks());
        for (int index = 0; index < this.ctc.getNumOfBlocks(); index++)
            blockStrings.addElement("Block "+index);
        this.blockComboSel.setModel(blockStrings);
        this.blockComboSel.setSelectedIndex(0);
    }
    
    private TrackController getTrackControllerForBlock(ArrayList<TrackController> listOfControllers ,int block_ID){
        TrackController temp = null;
        
        /*Loop through list of Controllers to find the one monitoring this Block*/
        for (int index = 0; index < listOfControllers.size(); index++){
            int block_start, block_end;
            temp = listOfControllers.get(index);
            block_start = temp.getTrackStatus().getBlockStart();
            block_end = temp.getTrackStatus().getBlockEnd();
            if(block_start <= block_ID && block_ID <= block_end){
                //Exit the loop and return this trackcontroller
                break;
            }
            else{
                continue;
            }
        }
        
        return (temp);
    }
    
    public void refreshBlockInfoDisplay(){
        //Get the Item Selected
        int item = (this.blockComboSel.getSelectedIndex()-1);
        
        //Which Line are we paying attentino to?
        TrackModel theLine = ((this.trackComboSel.getSelectedIndex() == 1) ? this.redLine: this.greenLine);
        
        if (this.trackSelected && this.blockSelected){
            this.showBlockControl();
            this.showBlockInfo();

            TrackController temp = this.getTrackControllerForBlock(theLine.getLineControllers(), item);

            /*Display Approriate Control Configuration -> Need to add a 
              decision for which line we are on!*/

            //Is there even a Switch on this block?
            if (theLine.blocks.get(item).switchOnBlock()){
                this.showControlSwitchState();
            }
            else{
                this.hideControlSwitchState();
            }

            //Is there even a Railway Crossing on this block?
            if (theLine.blocks.get(item).crossingOnBlock()){
                this.showControlRailwayState();
            }
            else{
                this.hideControlRailwayState();
            }

            /*Display Block Info*/
            //Set Track Controller Monitoring
            this.wcMonitorVal.setText(""+temp.getTrackControllerIdentifier());
            //Set Track Block is on
            this.trackVal.setText("Red Line");
            //Set Block Number
            this.blockVal.setText(""+item);
            //Am I a train station? ->need to implement getting station name
            this.stationVal.setText(theLine.blocks.get(item).stationOnBlock() ? "Yes":"No");
            //Is there a switch on me?
            this.switchOnMeVal.setText(theLine.blocks.get(item).switchOnBlock() ? "Yes":"No");
            //Set what the switch state is
            if(theLine.blocks.get(item).switchOnBlock()){
                this.switchStateVal.setText((theLine.switches.get(item).next_block == theLine.switches.get(item).block_id[1]) ? "Closed":"Open");
                //If Switch is Closed
                if (theLine.switches.get(item).next_block == theLine.switches.get(item).block_id[1]){
                    this.closeSRadio.setSelected(true);
                    //this.openSRadio.setSelected(false);
                }
                //Switch is Open
                else{
                    //this.closeSRadio.setSelected(false);
                    this.openSRadio.setSelected(true);
                }
                this.startConnectVal.setText(""+theLine.switches.get(item).block_id[0]);
                this.endConnectVal.setText(""+theLine.switches.get(item).next_block);
            }
            else{
                this.switchStateVal.setText("No Switch Present");
                this.startConnectVal.setText("");
                this.endConnectVal.setText("");
                this.switchStateGroup.clearSelection();
            }
            //Is there a Railway Crossing on Me?
            this.railOnMeVal.setText(theLine.blocks.get(item).crossingOnBlock() ? "Yes":"No");
            if(theLine.blocks.get(item).crossingOnBlock()){
                this.railStateVal.setText(temp.getRailwayCrossing().crossingDropped ? "Dropped":"Raised");
                if (temp.getRailwayCrossing().crossingDropped){
                    this.dropRailRadio.setSelected(true);
                }
                else{
                    this.raiseRailRadio.setSelected(true);
                }
            }
            else{
                this.railStateVal.setText("No Railway Crossing Present");
                this.railwayStateGroup.clearSelection();
            }
            
            //Set the Block Authority
            this.authorityVal.setText(""+theLine.blocks.get(item).authority);
            
            //Set the Block Speed
            this.speedVal.setText(""+theLine.blocks.get(item).speed);
            
            //Is there a train on me?
            this.trainOnMeVal.setText(theLine.blocks.get(item).trainOnBlock() ? ("Yes, Train ID: "):"No");
            
        }
    }
}
