/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author yanisoukaci
 */

package TrainSimulator;
import java.util.*;

public class PhantomCTCGUI extends javax.swing.JFrame {
    TrackModel red, green;
    TrainController tc;
    ArrayList<TrainController> trains = new ArrayList<>();
    ArrayList<TrackController> red_controllers = new ArrayList<>();
    ArrayList<TrackController> green_controllers = new ArrayList<>();
    ArrayList<Switch> switches = new ArrayList<>();
    ArrayList<Double> speeds = new ArrayList<>();
    ArrayList<Double> authorities = new ArrayList<>();
    HashMap<String, Integer> redStations = new HashMap<>();
    HashMap<String, Integer> greenStations = new HashMap<>();
    TC_MAINGUI wc;
    TimerTask clock;
    Timer timer;
    int counter = 1;
    int numOfBlocks = 10;
    
    /**
     * Creates new form PhantomCTCGUI
     */
    public PhantomCTCGUI() {
        initComponents();
    }
    public double getSpeed(int train_id)
    {
        return speeds.get(train_id - 1);
    }
    public double getAuthority(int train_id)
    {
        return authorities.get(train_id - 1);
    }
    
    public double getDt()
    {
        return (1/timer_slider.getValue());
    }
    
    public int getRedLineNumOfBlocks()
    {
        return red.getTrackSize();
    }
    
    public int getGreenLineNumOfBlocks()
    {
        return green.getTrackSize();
    }
    
    public void setCrossBarStatus(String s, String id)
    {
        if(id.equals("Red Line"))
        {
            redCrossBar.setText(s);
        }
        else if(id.equals("Green Line"))
        {
            greenCrossBar.setText(s);
        }
    }
    
    public void setCurrBlock(int b, int i)
    {
        if(trainList.getSelectedIndex() == (i - 1))
        {
            curr_block.setText(Integer.toString(b));
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jOptionPane1 = new javax.swing.JOptionPane();
        jOptionPane2 = new javax.swing.JOptionPane();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        load = new javax.swing.JButton();
        speedVal = new javax.swing.JTextField();
        authorityVal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pushSpeed = new javax.swing.JButton();
        pushAuthority = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        curr_block = new javax.swing.JLabel();
        updateGUI = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        redCrossBar = new javax.swing.JLabel();
        pause_button = new javax.swing.JButton();
        timer_slider = new javax.swing.JSlider();
        addTrain = new javax.swing.JButton();
        trainList = new javax.swing.JComboBox();
        switchList = new javax.swing.JComboBox();
        closeSwitch = new javax.swing.JButton();
        openSwitch = new javax.swing.JButton();
        lineList = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        greenCrossBar = new javax.swing.JLabel();
        lineName = new javax.swing.JLabel();
        stationList = new javax.swing.JComboBox();
        sendToStation = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jMenu3.setText("File");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar1.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        speedVal.setText("25");

        authorityVal.setText("20");

        jLabel1.setText("Speed");

        jLabel2.setText("Authority");

        pushSpeed.setText("Push");
        pushSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushSpeedActionPerformed(evt);
            }
        });

        pushAuthority.setText("Push");
        pushAuthority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushAuthorityActionPerformed(evt);
            }
        });

        jLabel3.setText("Current Block");

        curr_block.setText("--");

        updateGUI.setText("Start");
        updateGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateGUIActionPerformed(evt);
            }
        });

        jLabel4.setText("Red Crossing");

        redCrossBar.setText("----------");

        pause_button.setText("Stop");
        pause_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pause_buttonActionPerformed(evt);
            }
        });

        timer_slider.setMajorTickSpacing(20);
        timer_slider.setMaximum(200);
        timer_slider.setMinimum(1);
        timer_slider.setMinorTickSpacing(1);
        timer_slider.setPaintLabels(true);
        timer_slider.setPaintTicks(true);
        timer_slider.setSnapToTicks(true);
        timer_slider.setValue(5);

        addTrain.setText("Add Train");
        addTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTrainActionPerformed(evt);
            }
        });

        trainList.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        trainList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainListActionPerformed(evt);
            }
        });

        switchList.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N

        closeSwitch.setText("Close Switch");
        closeSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSwitchActionPerformed(evt);
            }
        });

        openSwitch.setText("Open Switch");
        openSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSwitchActionPerformed(evt);
            }
        });

        lineList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineListActionPerformed(evt);
            }
        });

        jLabel5.setText("Green Crossing");

        greenCrossBar.setText("----------");

        lineName.setText("----------");

        sendToStation.setText("Send Train to Station");
        sendToStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToStationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(timer_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(switchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateGUI)
                                .addGap(18, 18, 18)
                                .addComponent(pause_button))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(load)
                                .addComponent(openSwitch)
                                .addComponent(lineName, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(trainList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel1))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(authorityVal, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(speedVal, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(68, 68, 68)))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(redCrossBar)
                                    .addComponent(pushAuthority)
                                    .addComponent(greenCrossBar)
                                    .addComponent(pushSpeed)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(closeSwitch)
                                            .addComponent(jLabel3))
                                        .addGap(23, 23, 23)
                                        .addComponent(curr_block, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lineList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addTrain))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(stationList, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sendToStation)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(timer_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateGUI)
                    .addComponent(pause_button)
                    .addComponent(lineList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addTrain))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(pushSpeed))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorityVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(pushAuthority))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(switchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeSwitch)
                    .addComponent(openSwitch))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(curr_block)
                    .addComponent(lineName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stationList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendToStation))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(redCrossBar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(load)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(greenCrossBar)))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // TODO add your handling code here:
        
        
        //put train on red line
        red = new TrackModel("red_line.txt", this);
        lineList.addItem(red);
        redStations = red.getStations();
        green = new TrackModel("green_line.txt", this);
        greenStations = green.getStations();
        lineList.addItem(green);
        red_controllers = red.getLineControllers();
        green_controllers = green.getLineControllers();
        for(Switch s : red.getSwitchList())
        {
            switches.add(s);
        }
        for(Switch s : green.getSwitchList())
        {
            switches.add(s);
        }
        for(Switch s : switches)
        {
            switchList.addItem(s);
        }
        speeds.add(0,Double.parseDouble(speedVal.getText()));
        speeds.add(1,Double.parseDouble(speedVal.getText()));
        authorities.add(0,Double.parseDouble(authorityVal.getText()));
        authorities.add(1,Double.parseDouble(authorityVal.getText()));
        wc = new TC_MAINGUI(this, red, green);
        tc = new TrainController(red, counter, 0);
        counter++;
        trains.add(tc);
        red.addTrainToTrack(counter - 1);
        trainList.addItem(tc);
        lineName.setText(red.toString());
        tc = new TrainController(green, counter, 0);
        counter++;
        trains.add(tc);
        green.addTrainToTrack(counter - 1);
        trainList.addItem(tc);
            
    }//GEN-LAST:event_loadActionPerformed

    private void pushSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushSpeedActionPerformed
        // TODO add your handling code here:
        int x = trainList.getSelectedIndex();
        System.out.println(x);
        speeds.add(x,Double.parseDouble(speedVal.getText()));
    }//GEN-LAST:event_pushSpeedActionPerformed

    private void updateGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateGUIActionPerformed
        // TODO add your handling code here:
        clock = new Clock(this, wc, trains);
        timer = new Timer(false);
        timer.scheduleAtFixedRate(clock, 0, 1000/timer_slider.getValue());
        
    }//GEN-LAST:event_updateGUIActionPerformed

    private void pushAuthorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushAuthorityActionPerformed
        // TODO add your handling code here:
        int x = trainList.getSelectedIndex();
        System.out.println(x);
        authorities.add(x,Double.parseDouble(authorityVal.getText()));
    }//GEN-LAST:event_pushAuthorityActionPerformed

    private void pause_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pause_buttonActionPerformed
        // TODO add your handling code here:
        timer.cancel();
        timer.purge();
    }//GEN-LAST:event_pause_buttonActionPerformed

    private void addTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTrainActionPerformed
        // TODO add your handling code here:
        
        speeds.add(counter - 1,Double.parseDouble(speedVal.getText()));
        authorities.add(counter - 1,Double.parseDouble(authorityVal.getText()));
        tc = new TrainController((TrackModel)lineList.getSelectedItem(), counter, 0);
        tc.minimalize();
        counter++;
        if(lineList.getSelectedIndex() == 0)
        {    
            red.addTrainToTrack(counter - 1);
        }
        else if(lineList.getSelectedIndex() == 1)
        {
            green.addTrainToTrack(counter - 1);
        }
        trains.add(tc);
        trainList.addItem(tc);
    }//GEN-LAST:event_addTrainActionPerformed

    private void closeSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSwitchActionPerformed
        // TODO add your handling code here:
        int x = switchList.getSelectedIndex();
        if(switches.get(x).id > 5)
        {
            TrackController temp = red_controllers.get(0);
            for(TrackController t : red_controllers)
            {
                TrackStatus s = t.getTrackStatus();
               int start = s.getBlockStart();
               int end = s.getBlockEnd();
               if(switches.get(x).block_id[0] >= start && switches.get(x).block_id[0] <= end)
               {
                   temp = t;
               }
            }

            temp.trackChange(red, switches.get(x).block_id[0], 0);
        }
        else
        {
           TrackController temp = green_controllers.get(0);
            for(TrackController t : green_controllers)
            {
                TrackStatus s = t.getTrackStatus();
               int start = s.getBlockStart();
               int end = s.getBlockEnd();
               if(switches.get(x).block_id[0] >= start && switches.get(x).block_id[0] <= end)
               {
                   temp = t;
               }
            }

            temp.trackChange(green, switches.get(x).block_id[0], 0); 
        }
    }//GEN-LAST:event_closeSwitchActionPerformed

    private void trainListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainListActionPerformed
        // TODO add your handling code here:
        int x = trainList.getSelectedIndex();
        for(TrainController t : trains)
        {
            t.minimalize();
        }
        curr_block.setText(Integer.toString(trains.get(x).traincart.blockID));
        trains.get(x).normalize();
        lineName.setText(trains.get(x).traincart.myLine.toString());
    }//GEN-LAST:event_trainListActionPerformed

    private void openSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSwitchActionPerformed
        // TODO add your handling code here:
        int x = switchList.getSelectedIndex();
        if(switches.get(x).id > 5)
        {
            TrackController temp = red_controllers.get(0);
            for(TrackController t : red_controllers)
            {
                TrackStatus s = t.getTrackStatus();
               int start = s.getBlockStart();
               int end = s.getBlockEnd();
               if(switches.get(x).block_id[0] >= start && switches.get(x).block_id[0] <= end)
               {
                   temp = t;
               }
            }

            temp.trackChange(red, switches.get(x).block_id[0], 1);
        }
        else
        {
            TrackController temp = green_controllers.get(0);
            for(TrackController t : green_controllers)
            {
                TrackStatus s = t.getTrackStatus();
               int start = s.getBlockStart();
               int end = s.getBlockEnd();
               if(switches.get(x).block_id[0] >= start && switches.get(x).block_id[0] <= end)
               {
                   temp = t;
               }
            }

            temp.trackChange(green, switches.get(x).block_id[0], 1);
        }
    }//GEN-LAST:event_openSwitchActionPerformed

    private void lineListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineListActionPerformed
        // TODO add your handling code here:
        int x = lineList.getSelectedIndex();
        stationList.removeAllItems();
        if(x == 0)
        {
            for(String s : redStations.keySet())
            {
                stationList.addItem(s);
            }
        }
        else if(x == 1)
        {
            for(String s : greenStations.keySet())
            {
                stationList.addItem(s);
            }
        }
    }//GEN-LAST:event_lineListActionPerformed

    private void sendToStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToStationActionPerformed
        // TODO add your handling code here:
        int x = trainList.getSelectedIndex();
        String y = (String)stationList.getSelectedItem();
        int current = trains.get(x).traincart.blockID;
        int  stationBlock = 0;
        double auth;
        if(redStations.containsKey(y))
        {
            stationBlock = redStations.get(y);
        }
        else if(greenStations.containsKey(y))
        {
            stationBlock = greenStations.get(y);
        }
        auth = stationBlock - current;
        authorities.add(x, auth);
    }//GEN-LAST:event_sendToStationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhantomCTCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhantomCTCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhantomCTCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhantomCTCGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhantomCTCGUI().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTrain;
    private javax.swing.JTextField authorityVal;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton closeSwitch;
    private javax.swing.JLabel curr_block;
    private javax.swing.JLabel greenCrossBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JOptionPane jOptionPane2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JComboBox lineList;
    private javax.swing.JLabel lineName;
    private javax.swing.JButton load;
    private javax.swing.JButton openSwitch;
    private javax.swing.JButton pause_button;
    private javax.swing.JButton pushAuthority;
    private javax.swing.JButton pushSpeed;
    private javax.swing.JLabel redCrossBar;
    private javax.swing.JButton sendToStation;
    private javax.swing.JTextField speedVal;
    private javax.swing.JComboBox stationList;
    private javax.swing.JComboBox switchList;
    private javax.swing.JSlider timer_slider;
    private javax.swing.JComboBox trainList;
    private javax.swing.JButton updateGUI;
    // End of variables declaration//GEN-END:variables
}
